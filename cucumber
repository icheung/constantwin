Script started on Wed Nov  3 15:04:15 2010
bash-3.2$ script/cucumber 
Using the default profile...
[31mF[0m[36m-[0m[36m-[0m[36m-[0m[31mF[0m[36m-[0m[36m-[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[31mF[0m[36m-[0m[36m-[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[31mF[0m[33mU[0m[31mF[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[31mF[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[33mU[0m[31mF[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[31mF[0m[36m-[0m[36m-[0m[36m-[0m[31mF[0m[36m-[0m[36m-[0m[36m-[0m[31mF[0m[33mU[0m[33mU[0m[36m-[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[31mF[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[36m-[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[31mF[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[31mF[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[31mF[0m[33mU[0m[31mF[0m[36m-[0m[36m-[0m[31mF[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[31mF[0m[33mU[0m[36m-[0m[33mU[0m[31mF[0m[36m-[0m[36m-[0m[36m-[0m[31mF[0m[36m-[0m[36m-[0m[36m-[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[31mF[0m[36m-[0m[36m-[0m[36m-[0m[33mU[0m[36m-[0m[33mU[0m[36m-[0m[33mU[0m

[31m(::) failed steps (::)[0m

[31mAmbiguous match of "I am on the dashboard":

features/step_definitions/start_task_steps.rb:9:in `/^I am on the dashboard$/'
features/step_definitions/web_steps.rb:15:in `/^(?:|I )am on (.+)$/'

You can run again with --guess to make Cucumber be more smart about it
 (Cucumber::Ambiguous)
script/cucumber:9:in `load'
script/cucumber:9
features/add_more_time.feature:8:in `Given I am on the dashboard'[0m

[31mAmbiguous match of "I am on the dashboard":

features/step_definitions/start_task_steps.rb:9:in `/^I am on the dashboard$/'
features/step_definitions/web_steps.rb:15:in `/^(?:|I )am on (.+)$/'

You can run again with --guess to make Cucumber be more smart about it
 (Cucumber::Ambiguous)
script/cucumber:9:in `load'
script/cucumber:9
features/add_more_time.feature:8:in `Given I am on the dashboard'[0m

[31mAmbiguous match of "I should be on the task timer page":

features/step_definitions/start_task_steps.rb:15:in `/^I should be on the task timer page$/'
features/step_definitions/web_steps.rb:257:in `/^(?:|I )should be on (.+)$/'

You can run again with --guess to make Cucumber be more smart about it
 (Cucumber::Ambiguous)
script/cucumber:9:in `load'
script/cucumber:9
features/add_more_time.feature:27:in `Then I should be on the task timer page'[0m

[31mAmbiguous match of "I am on the dashboard":

features/step_definitions/start_task_steps.rb:9:in `/^I am on the dashboard$/'
features/step_definitions/web_steps.rb:15:in `/^(?:|I )am on (.+)$/'

You can run again with --guess to make Cucumber be more smart about it
 (Cucumber::Ambiguous)
script/cucumber:9:in `load'
script/cucumber:9
features/add_new_task.feature:10:in `Given I am on the dashboard'[0m

[31mAmbiguous match of "I am on the dashboard":

features/step_definitions/start_task_steps.rb:9:in `/^I am on the dashboard$/'
features/step_definitions/web_steps.rb:15:in `/^(?:|I )am on (.+)$/'

You can run again with --guess to make Cucumber be more smart about it
 (Cucumber::Ambiguous)
script/cucumber:9:in `load'
script/cucumber:9
features/add_new_task.feature:19:in `Given I am on the dashboard'[0m

[31mAmbiguous match of "I should be on the task timer page":

features/step_definitions/start_task_steps.rb:15:in `/^I should be on the task timer page$/'
features/step_definitions/web_steps.rb:257:in `/^(?:|I )should be on (.+)$/'

You can run again with --guess to make Cucumber be more smart about it
 (Cucumber::Ambiguous)
script/cucumber:9:in `load'
script/cucumber:9
features/add_new_task.feature:25:in `And I should be on the task timer page'[0m

[31mAmbiguous match of "I am on the dashboard":

features/step_definitions/start_task_steps.rb:9:in `/^I am on the dashboard$/'
features/step_definitions/web_steps.rb:15:in `/^(?:|I )am on (.+)$/'

You can run again with --guess to make Cucumber be more smart about it
 (Cucumber::Ambiguous)
script/cucumber:9:in `load'
script/cucumber:9
features/delete_task.feature:8:in `Given I am on the dashboard'[0m

[31mAmbiguous match of "I am on the dashboard":

features/step_definitions/start_task_steps.rb:9:in `/^I am on the dashboard$/'
features/step_definitions/web_steps.rb:15:in `/^(?:|I )am on (.+)$/'

You can run again with --guess to make Cucumber be more smart about it
 (Cucumber::Ambiguous)
script/cucumber:9:in `load'
script/cucumber:9
features/delete_task.feature:14:in `Given I am on the dashboard'[0m

[31mAmbiguous match of "I am on the dashboard":

features/step_definitions/start_task_steps.rb:9:in `/^I am on the dashboard$/'
features/step_definitions/web_steps.rb:15:in `/^(?:|I )am on (.+)$/'

You can run again with --guess to make Cucumber be more smart about it
 (Cucumber::Ambiguous)
script/cucumber:9:in `load'
script/cucumber:9
features/exit_item_view.feature:19:in `Given I am on the dashboard'[0m

[31mAmbiguous match of "I am on the dashboard":

features/step_definitions/start_task_steps.rb:9:in `/^I am on the dashboard$/'
features/step_definitions/web_steps.rb:15:in `/^(?:|I )am on (.+)$/'

You can run again with --guess to make Cucumber be more smart about it
 (Cucumber::Ambiguous)
script/cucumber:9:in `load'
script/cucumber:9
features/start_task.feature:8:in `Given I am on the dashboard'[0m

[31mAmbiguous match of "I am on the dashboard":

features/step_definitions/start_task_steps.rb:9:in `/^I am on the dashboard$/'
features/step_definitions/web_steps.rb:15:in `/^(?:|I )am on (.+)$/'

You can run again with --guess to make Cucumber be more smart about it
 (Cucumber::Ambiguous)
script/cucumber:9:in `load'
script/cucumber:9
features/start_task.feature:18:in `Given I am on the dashboard'[0m

[31mAmbiguous match of "I should be on the task timer page":

features/step_definitions/start_task_steps.rb:15:in `/^I should be on the task timer page$/'
features/step_definitions/web_steps.rb:257:in `/^(?:|I )should be on (.+)$/'

You can run again with --guess to make Cucumber be more smart about it
 (Cucumber::Ambiguous)
script/cucumber:9:in `load'
script/cucumber:9
features/start_task.feature:20:in `Then I should be on the task timer page'[0m

[31mAmbiguous match of "I am on the dashboard":

features/step_definitions/start_task_steps.rb:9:in `/^I am on the dashboard$/'
features/step_definitions/web_steps.rb:15:in `/^(?:|I )am on (.+)$/'

You can run again with --guess to make Cucumber be more smart about it
 (Cucumber::Ambiguous)
script/cucumber:9:in `load'
script/cucumber:9
features/start_task.feature:8:in `Given I am on the dashboard'[0m

[31mAmbiguous match of "I am on the dashboard":

features/step_definitions/start_task_steps.rb:9:in `/^I am on the dashboard$/'
features/step_definitions/web_steps.rb:15:in `/^(?:|I )am on (.+)$/'

You can run again with --guess to make Cucumber be more smart about it
 (Cucumber::Ambiguous)
script/cucumber:9:in `load'
script/cucumber:9
features/start_task.feature:25:in `Given I am on the dashboard'[0m

[31mAmbiguous match of "I am on the dashboard":

features/step_definitions/start_task_steps.rb:9:in `/^I am on the dashboard$/'
features/step_definitions/web_steps.rb:15:in `/^(?:|I )am on (.+)$/'

You can run again with --guess to make Cucumber be more smart about it
 (Cucumber::Ambiguous)
script/cucumber:9:in `load'
script/cucumber:9
features/start_timer.feature:8:in `Given I am on the dashboard'[0m

[31mAmbiguous match of "I am on the dashboard":

features/step_definitions/start_task_steps.rb:9:in `/^I am on the dashboard$/'
features/step_definitions/web_steps.rb:15:in `/^(?:|I )am on (.+)$/'

You can run again with --guess to make Cucumber be more smart about it
 (Cucumber::Ambiguous)
script/cucumber:9:in `load'
script/cucumber:9
features/start_timer.feature:8:in `Given I am on the dashboard'[0m

[31mFailing Scenarios:[0m
[31mcucumber features/add_more_time.feature:18[0m[90m # Scenario: I click on Add time[0m
[31mcucumber features/add_more_time.feature:23[0m[90m # Scenario: I added more time[0m
[31mcucumber features/add_new_task.feature:9[0m[90m # Scenario: Add a task to a blank dashboard and visualize it[0m
[31mcucumber features/add_new_task.feature:18[0m[90m # Scenario: Add a task while in the middle of another task[0m
[31mcucumber features/delete_task.feature:13[0m[90m # Scenario: I delete the task[0m
[31mcucumber features/start_task.feature:17[0m[90m # Scenario: I start the task[0m
[31mcucumber features/start_task.feature:24[0m[90m # Scenario: I start a task while in the middle of another task[0m
[31mcucumber features/start_timer.feature:13[0m[90m # Scenario: I set the timer for task[0m
[31mcucumber features/start_timer.feature:19[0m[90m # Scenario: I set too little time[0m

24 scenarios ([31m9 failed[0m, [33m15 undefined[0m)
198 steps ([31m16 failed[0m, [36m78 skipped[0m, [33m104 undefined[0m)
0m0.285s
[33m
You can implement step definitions for undefined steps with these snippets:

Given /^the time runs out$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^I click on “Add time”$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^I should see a form for adding more time\.$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^I fill in (\d+) more minutes$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^there should be (\d+) more minutes left on my task$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Given /^I follow "([^"]*)" \#for "([^"]*)"$/ do |arg1, arg2|
  pending # express the regexp above with the code you wish you had
end

Then /^I have task with description "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^I started the task, "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^the time runs out$/ do
  pending # express the regexp above with the code you wish you had
end

When /^I click on “Divide and Conquer”$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^I should see a form for breaking down my tasks\.$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^I should see two field entries for entering tasks$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^I click on “Divide and Conquer”$/ do
  pending # express the regexp above with the code you wish you had
end

When /^I enter only one subtask$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^there should be no new tasks$/ do
  pending # express the regexp above with the code you wish you had
end

When /^I enter two subtasks, "([^"]*)" and "([^"]*)"$/ do |arg1, arg2|
  pending # express the regexp above with the code you wish you had
end

Then /^the "([^"]*)" task should be removed from task list$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^"Wash clothes should be on task list$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^"([^"]*)" should be on task list$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Given /^I type two subtasks, "([^"]*)" and "([^"]*)"$/ do |arg1, arg2|
  pending # express the regexp above with the code you wish you had
end

When /^I click on "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^I should see another entry field$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^I enter three subtasks, "([^"]*)" and "([^"]*)"$/ do |arg1, arg2|
  pending # express the regexp above with the code you wish you had
end

Given /^I see "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

When /^I click "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Given /^I am logged in as "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Given /^I have a task with description "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Given /^I have started the task "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^the task "([^"]*)" should not end prematurely$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Given /^my email is "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Given /^I am not logged in$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^there is no account registered to "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Given /^I entered all fields in the form$/ do
  pending # express the regexp above with the code you wish you had
end

When /^I submit my form$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^I should have an account registered with my email$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^there is already an account registered to "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

When /^I attempt to sign in$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^I should not be signed in$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^my password entry is wrong$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^my password entry is correct$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^I should be signed in$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^I should see my dashboard$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^I should be logged out$/ do
  pending # express the regexp above with the code you wish you had
end

When /^I press “Start” for "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

When /^I click “Start” \#for "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^the second task should not be started$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^I click “Start” \#for "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

When /^I enter "([^"]*)" minutes in the timer entry field$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^I should have "([^"]*)" minutes to complete my task$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^the task should not be started$/ do
  pending # express the regexp above with the code you wish you had
end[0m

bash-3.2$ script/cucumber 
Using the default profile...
[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[33mU[0m[33mU[0m[33mU[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[33mU[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[33mU[0m[33mU[0m[36m-[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[36m-[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[33mU[0m[36m-[0m[36m-[0m[33mU[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[33mU[0m[36m-[0m[33mU[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[33mU[0m[36m-[0m[33mU[0m[36m-[0m[33mU[0m

24 scenarios ([33m23 undefined[0m, [32m1 passed[0m)
198 steps ([36m43 skipped[0m, [33m105 undefined[0m, [32m50 passed[0m)
0m1.237s
[33m
You can implement step definitions for undefined steps with these snippets:

Given /^the time runs out$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^I click on “Add time”$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^I should see a form for adding more time\.$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^I fill in (\d+) more minutes$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^there should be (\d+) more minutes left on my task$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Given /^I follow "([^"]*)" \#for "([^"]*)"$/ do |arg1, arg2|
  pending # express the regexp above with the code you wish you had
end

Then /^I have task with description "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^I started the task, "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^the time runs out$/ do
  pending # express the regexp above with the code you wish you had
end

When /^I click on “Divide and Conquer”$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^I should see a form for breaking down my tasks\.$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^I should see two field entries for entering tasks$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^I click on “Divide and Conquer”$/ do
  pending # express the regexp above with the code you wish you had
end

When /^I enter only one subtask$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^there should be no new tasks$/ do
  pending # express the regexp above with the code you wish you had
end

When /^I enter two subtasks, "([^"]*)" and "([^"]*)"$/ do |arg1, arg2|
  pending # express the regexp above with the code you wish you had
end

Then /^the "([^"]*)" task should be removed from task list$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^"Wash clothes should be on task list$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^"([^"]*)" should be on task list$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Given /^I type two subtasks, "([^"]*)" and "([^"]*)"$/ do |arg1, arg2|
  pending # express the regexp above with the code you wish you had
end

When /^I click on "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^I should see another entry field$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^I enter three subtasks, "([^"]*)" and "([^"]*)"$/ do |arg1, arg2|
  pending # express the regexp above with the code you wish you had
end

Given /^I see "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

When /^I click "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Given /^I am logged in as "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Given /^I have a task with description "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Given /^I have started the task "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^the task "([^"]*)" should not end prematurely$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Given /^my email is "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Given /^I am not logged in$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^there is no account registered to "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Given /^I entered all fields in the form$/ do
  pending # express the regexp above with the code you wish you had
end

When /^I submit my form$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^I should have an account registered with my email$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^there is already an account registered to "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

When /^I attempt to sign in$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^I should not be signed in$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^my password entry is wrong$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^my password entry is correct$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^I should be signed in$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^I should see my dashboard$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^I should be logged out$/ do
  pending # express the regexp above with the code you wish you had
end

When /^I press “Start” for "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^I should see a timer entry field$/ do
  pending # express the regexp above with the code you wish you had
end

When /^I click “Start” \#for "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^the second task should not be started$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^I click “Start” \#for "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

When /^I enter "([^"]*)" minutes in the timer entry field$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^I should have "([^"]*)" minutes to complete my task$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^the task should not be started$/ do
  pending # express the regexp above with the code you wish you had
end[0m

bash-3.2$ script/cucumber > iris.txt [K[K[K[K[K[K[K[K[K[K[Kspec= U[K![K~/
.CFUserTextEncoding            .vimrc
.DS_Store                      Applications/
.PinholePseudoCode.swp         Desktop/
.Trash/                        Documents/
.Xauthority                    Downloads/
.Xcode/                        Fall2010/
.adobe/                        Library/
.bash_history                  Life/
.bash_profile                  Movies/
.bashrc                        Music/
.config/                       Pictures/
.cups/                         Public/
.emacs.d/                      Sites/
.fontconfig/                   assignments/
.gdb_history                   bin/
.gem/                          cb/
.gitconfig                     chrome_fun/
.gnome2/                       code/
.gnupg/                        constant_win/
.gpg-agent-info                extension_with_jq/
.heroku/                       html_skeleton.html
.hgrc                          iphone-learning/
.inkscape-etc/                 jquery_learning/
--More--[Kbash-3.2$ script/cucumber spec= ~/[Kc[K
~_amavisd/              ~_lda/                  ~_svn/
~_appowner/             ~_locationd/            ~_teamsserver
~_appserver/            ~_lp/                   ~_timezone/
~_ard/                  ~_mailman/              ~_tokend/
~_atsserver/            ~_mcxalr/               ~_trustevaluationagent/
~_calendar/             ~_mdnsresponder/        ~_unknown/
~_carddav/              ~_mysql/                ~_update_sharing/
~_clamav/               ~_pcastagent            ~_usbmuxd/
~_coreaudiod/           ~_pcastserver           ~_uucp/
~_cvmsroot/             ~_postfix/              ~_windowserver/
~_cvs/                  ~_qtss/                 ~_www/
~_cyrus                 ~_sandbox/              ~_xgridagent/
~_devdocs/              ~_screensaver/          ~_xgridcontroller/
~_dovecot/              ~_securityagent/        ~daemon/
~_dpaudio/              ~_serialnumberd/        ~icheung/
~_eppc/                 ~_softwareupdate/       ~nobody/
~_installer/            ~_spotlight/            ~root/
~_jabber/               ~_sshd/                 
bash-3.2$ script/cucumber spec= ~?[K/
.CFUserTextEncoding            .vimrc
.DS_Store                      Applications/
.PinholePseudoCode.swp         Desktop/
.Trash/                        Documents/
.Xauthority                    Downloads/
.Xcode/                        Fall2010/
.adobe/                        Library/
.bash_history                  Life/
.bash_profile                  Movies/
.bashrc                        Music/
.config/                       Pictures/
.cups/                         Public/
.emacs.d/                      Sites/
.fontconfig/                   assignments/
.gdb_history                   bin/
.gem/                          cb/
.gitconfig                     chrome_fun/
.gnome2/                       code/
.gnupg/                        constant_win/
.gpg-agent-info                extension_with_jq/
.heroku/                       html_skeleton.html
.hgrc                          iphone-learning/
.inkscape-etc/                 jquery_learning/
--More--[Kbash-3.2$ script/cucumber spec= ~/constant_win/constantwin/features/s
sessions.feature     start_timer.feature  support/
start_task.feature   step_definitions/    
bash-3.2$ script/cucumber spec= ~/constant_win/constantwin/features/s
sessions.feature     start_timer.feature  support/
start_task.feature   step_definitions/    
bash-3.2$ script/cucumber spec= ~/constant_win/constantwin/features/st
start_task.feature   start_timer.feature  step_definitions/
bash-3.2$ script/cucumber spec= ~/constant_win/constantwin/features/start_task.feeature app/
controllers/ helpers/     models/      views/       
bash-3.2$ script/cucumber spec= ~/constant_win/constantwin/features/start_task.feeature app/[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
[C[C[C[C[C[C[C[C[C[C[C[K[K[K[K[K[K[K[K[K[K[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kscript/cucumber [C[C[C[C[C[C[C[C[C[Cmate rottenpotatoes/[C[C[C[C[C[C[C[C[C[Cls[K
bash-3.2$ script/cucumber [C[C[C[C[C[C[C[C[C[Cmate rottenpotatoes/[C[C[C[C[C[C[C[C[C[C[4Pscript/cucumber spec=~/constant_win/constantwin/features/start_task.feaature 
Using the default profile...
[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[33mU[0m[33mU[0m[33mU[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[33mU[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[36m-[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[33mU[0m[33mU[0m[36m-[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[36m-[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[33mU[0m[36m-[0m[33mU[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[33mU[0m[36m-[0m[36m-[0m[33mU[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[33mU[0m[36m-[0m[33mU[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[33mU[0m[36m-[0m[33mU[0m[33mU[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[33mU[0m[36m-[0m[33mU[0m[36m-[0m[33mU[0m

24 scenarios ([33m23 undefined[0m, [32m1 passed[0m)
198 steps ([36m43 skipped[0m, [33m105 undefined[0m, [32m50 passed[0m)
0m1.156s
[33m
You can implement step definitions for undefined steps with these snippets:

Given /^the time runs out$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^I click on “Add time”$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^I should see a form for adding more time\.$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^I fill in (\d+) more minutes$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^there should be (\d+) more minutes left on my task$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Given /^I follow "([^"]*)" \#for "([^"]*)"$/ do |arg1, arg2|
  pending # express the regexp above with the code you wish you had
end

Then /^I have task with description "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^I started the task, "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^the time runs out$/ do
  pending # express the regexp above with the code you wish you had
end

When /^I click on “Divide and Conquer”$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^I should see a form for breaking down my tasks\.$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^I should see two field entries for entering tasks$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^I click on “Divide and Conquer”$/ do
  pending # express the regexp above with the code you wish you had
end

When /^I enter only one subtask$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^there should be no new tasks$/ do
  pending # express the regexp above with the code you wish you had
end

When /^I enter two subtasks, "([^"]*)" and "([^"]*)"$/ do |arg1, arg2|
  pending # express the regexp above with the code you wish you had
end

Then /^the "([^"]*)" task should be removed from task list$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^"Wash clothes should be on task list$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^"([^"]*)" should be on task list$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Given /^I type two subtasks, "([^"]*)" and "([^"]*)"$/ do |arg1, arg2|
  pending # express the regexp above with the code you wish you had
end

When /^I click on "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^I should see another entry field$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^I enter three subtasks, "([^"]*)" and "([^"]*)"$/ do |arg1, arg2|
  pending # express the regexp above with the code you wish you had
end

Given /^I see "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

When /^I click "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Given /^I am logged in as "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Given /^I have a task with description "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Given /^I have started the task "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^the task "([^"]*)" should not end prematurely$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Given /^my email is "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Given /^I am not logged in$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^there is no account registered to "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Given /^I entered all fields in the form$/ do
  pending # express the regexp above with the code you wish you had
end

When /^I submit my form$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^I should have an account registered with my email$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^there is already an account registered to "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

When /^I attempt to sign in$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^I should not be signed in$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^my password entry is wrong$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^my password entry is correct$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^I should be signed in$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^I should see my dashboard$/ do
  pending # express the regexp above with the code you wish you had
end

Then /^I should be logged out$/ do
  pending # express the regexp above with the code you wish you had
end

When /^I press “Start” for "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^I should see a timer entry field$/ do
  pending # express the regexp above with the code you wish you had
end

When /^I click “Start” \#for "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^the second task should not be started$/ do
  pending # express the regexp above with the code you wish you had
end

Given /^I click “Start” \#for "([^"]*)"$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

When /^I enter "([^"]*)" minutes in the timer entry field$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^I should have "([^"]*)" minutes to complete my task$/ do |arg1|
  pending # express the regexp above with the code you wish you had
end

Then /^the task should not be started$/ do
  pending # express the regexp above with the code you wish you had
end[0m

bash-3.2$ script/cucumber spec=~/constant_win/constantwin/features/start_task.feaature [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
bash-3.2$ script/cucumber spec=~/constant_win/constantwin/features/start_task.feaature [K[K[K[K[K[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K[K
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ 
bash-3.2$ script/cucumber spec=~/constant_win/constantwin/features/start_task.feaature [K[K[K[K[K[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K
[K[A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[K[K[K[K[K[K[K[K[K[K[K
bash-3.2$ logout
bash: logout: not login shell: use `exit'
bash-3.2$ exit
exit

Script done on Wed Nov  3 15:20:48 2010
