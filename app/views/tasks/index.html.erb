<% content_for :title, "Tasks" %>

<script type="text/javascript">
  var ajax_updater;
  var update_progress;

  var check_time; // actually should be named start_time
	var stopSwitch = true;
	var paused_time_stop;
	var paused_time_go;
	var paused_total_duration;
	

  function startTimer(elementID) {
    ajax_updater = new Ajax.PeriodicalUpdater(
      elementID,
      '/tasks/time_left/' + elementID.substring(5).toString(),
      { method: 'get', frequency: 1, decay: 1, onCreate:hideTasks() }

    );
    check_time = setInterval('checkTime("' + elementID.substring(5).toString() + '")', 5000);
		// console.debug(check_time);
    update_progress = setInterval('updateProgressBar("'+elementID.substring(5).toString()+'")',100);
  }

  function hideTasks() {
  jQuery(document).ready( function() {      
      jQuery("#show").show();
      jQuery(".taskEntry").has("input[disabled=\"\"]").hide();
      jQuery(".taskEntry").not(jQuery(".taskEntry").has("input[disabled=\"\"]")).css("font-size",20);
    });
  }

  function stopTimer() {
    clearInterval(check_time);
    clearInterval(update_progress);
    // jQuery("#progressbar").hide();
    jQuery("#progressbar").css('margin-top', '1em');
  jQuery("#progressbar > div").css({ 'background': '#ABDD58' });
  }

  function updateProgressBar(taskId) {
    // Debugging is fun!
    // console.debug(timeLeft);
    var timeLeft = document.getElementById('timer' + taskId).innerHTML;
    var parsed_time = timeLeft.match(/(\d+):(\d{2})/);
    if (parsed_time != null)
    {
      var minutes = parsed_time[1];
      var seconds = parsed_time[2] / 60;
      var timeFloatLeft = parseFloat(seconds) + parseFloat(minutes);
      var totalTime = parseInt(jQuery("#taskEntry"+taskId+">.duration").html());
    jQuery("#progressbar").progressbar({value: ((parseFloat(totalTime) - timeFloatLeft)/parseFloat(totalTime)) * 100.00});
      jQuery("#progressbar").show();
      jQuery("#progressbar").css("margin-top", "1em");

		if (stopSwitch == true) {	
				jQuery("#progressbar > div").css({ 'background': '#ABDD58'});
			} else {
				jQuery("#progressbar > div").css({ 'background': 'Red' });
  		}
		}
  }

  function checkTime(taskId) {
    var timeLeft = document.getElementById('timer' + taskId).innerHTML;
    var timeLeftInt = parseInt(timeLeft);
    var parsed_time = timeLeft.match(/(\d+):(\d{2})/);
    if (parsed_time != null)
    {
      var minutes = parsed_time[1];
      var seconds = parsed_time[2] / 60;
      var timeFloatLeft = parseFloat(seconds) + parseFloat(minutes);
      if (timeFloatLeft <= 0) fail(taskId);
    }
    return timeLeftInt;
  }
  function fail(taskId) {
    window.location = '/tasks/fail/' + taskId;
  }
  function checkOff(taskId) {
  new Ajax.Request('/tasks/finish/' + taskId, { method: 'put' })
    taskDescription = $$('#taskEntry' + taskId + ' td')[1];
    if (taskDescription.className.indexOf('done') == -1) {
      taskDescription.className += ', done';
      Field.disable('checkbox' + taskId);
      ajax_updater.stop();
    }
    else {
      taskDescription.className = taskDescription.className.replace('done', '');
      ajax_updater.stop();
    }
    stopTimer();
  }


	function stopTask(taskId){
		
		if (stopSwitch == true) {
		
		/*	STOPPING THE TIMER	*/	
			
		// get current time
		paused_time_stop = document.getElementById('timer' + taskId).innerHTML;
		
		// talk to the model pause
		new Ajax.Request('/tasks/pause/' + taskId, { method: 'put' });
		
		// effectively pause the timer
		ajax_updater.stop();

		// change progressbar and button colors
    jQuery("#progressbar > div").css({ 'background': 'Red' });
		jQuery("#imgStopTask" + taskId).children("img").attr('src','/images/circle-green-16.png');
		
		// set the stop button flag
		stopSwitch = false;
		}
		else {
			
		/*	RE-STARTING THE TIMER	*/
		
		// get the current time
		paused_time_go = document.getElementById('timer' + taskId).innerHTML;
		
		// talk to the model "resume"
		new Ajax.Request('/tasks/resume/' + taskId, { method: 'put' });
		
		// effectively start the timer
		ajax_updater.start();
		//startTimer();
			
		// change the progressbar and button colors
		jQuery("#progressbar > div").css({ 'background': '#ABDD58' });	
		jQuery("#imgStopTask" + taskId).children("img").attr('src', '/images/circle-red-16.png');
		
		// set the stop button flag
		stopSwitch = true;
		}
	}


  function save_edit(taskId) {
    var current = document.getElementById('current');
    var val = current.value;
    current.parentNode.parentNode.innerHTML = val;
  new Ajax.Request('/tasks/update/' + taskId, { method: 'post', parameters: {'task[description]': val}});
    return false;
  }
  Event.observe(window, 'load', function() {
    $$('.task_description').each(function(td, index) {
      var taskId = parseInt(td.parentNode.id.replace('taskEntry', ''));
      td.id = 'td' + taskId;
      Event.observe(td.id, 'click', function() {
        if (td.getElementsByTagName('input').length != 0) return;
        td.innerHTML = '<form onsubmit="save_edit('+taskId+');"><input id="current" type="text" value="' + td.innerHTML + '" onblur="save_edit('+taskId+')"/></form>';
        td.getElementsByTagName('input')[0].focus();
      });
    });
  });

  jQuery(document).ready( 
    function() {
      jQuery(".buttons").hide();
      //jQuery("#task_description,input#first,input#second").focus(function() { jQuery("#task_description").css('background-color','#'); });
      //jQuery("#task_description").blur(function() { jQuery("#task_description").css('background-color', 'white');});
      jQuery("#show").live('click',function() { jQuery("#show").html("Hide other tasks").attr("id","hide");jQuery(".taskEntry").delay(1000).show();});
      jQuery("#hide").live('click',function() { jQuery("#hide").html("Show other tasks").attr("id","show");hideTasks();});
      jQuery("#show").hide();
      jQuery(".taskEntry,.buttons").hover( function() { var s = jQuery(this).attr('id');jQuery("[butt="+s+"]").show(); }).mouseleave(function() { var s = jQuery(this).attr('id');jQuery("[butt="+s+"]").hide();}, 100);
      jQuery('#datepicker').datepicker({
        showOn: 'button',
        buttonText: 'Select Date',
        dateFormat: 'yymmdd',
        onSelect: function(dateText, inst) { filterByDate(dateText, inst); }
      });
      
    });

function nextDay() {
  var dp = jQuery('#datepicker');
  jQuery('#datepicker').datepicker('setDate', 'c+1');
  filterByDate(jQuery.datepicker.formatDate('yymmdd', dp.datepicker('getDate')));
}
function previousDay() {
  var dp = jQuery('#datepicker');
  jQuery('#datepicker').datepicker('setDate', 'c-1');
  filterByDate(jQuery.datepicker.formatDate('yymmdd', dp.datepicker('getDate')));
}

function filterByDate(dateString) {
  var y = parseInt(dateString.substring(0, 4));
  var m = parseInt(dateString.substring(4, 6).replace(/^0+/g, ''));
  var d = parseInt(dateString.substring(6, 8).replace(/^0+/g, ''));
  newDate = new Date(y, m-1, d);
  jQuery('#pageHeading').text('Tasks for ' + jQuery.datepicker.formatDate('MM d, yy', newDate));
  jQuery.ajax({url: '/tasks/ondate/',  type: 'POST', data: {'date': parseInt(dateString)}, success: function(data) {
    if (data == '') {
      jQuery('#noTasks').text('No tasks found.');
      jQuery('#noTasks').show();
      jQuery('.taskEntry').hide();
    }
    else {
      jQuery('#noTasks').hide();
      jQuery('.taskEntry').hide();
      var entries = data.split(' ');
      for (var i = 0; i < entries.length; i++) {
        jQuery('#taskEntry'+entries[i]).show();
      }
    }
  }});
  jQuery('#datepicker').datepicker('option', 'buttonText', (m<10 ? '0'+m : m)+'/'+(d<10 ? '0'+d : d)+'/'+y);
  jQuery('#associatedDateField').val(newDate.toString());
}


function displayObject(obj) {
  output = "";
  for (key in obj) output += key + ': ' + obj[key] + '\n';
  console.log(output);
}

</script>

<style type="text/css">
  .done { text-decoration: line-through; color: #999; }
</style>

<h1 id="pageHeading">Displaying All Tasks</h1>

<div id="addTaskDiv">
<% form_tag(:controller => "tasks", :action => "create") do %>
  <%= text_field_tag(:task_description, nil, :size => "30", :name => "task[description]",:placeholder => "Enter a new task!") %>
  <%= hidden_field_tag(:associated_date, Time.now(), :name => "task[associated_date]", :id => "associatedDateField") %>
  <!--<%= submit_tag("+") %>-->
<% end %>
</div>

<div id="dateNav">
  <a href="javascript:previousDay()">&lsaquo;</a>
  <input type="text" style="visibility: hidden; width: 0; height: 0; border: 0;" id="datepicker" />
  <a href="javascript:nextDay()">&rsaquo;</a>
</div>


<div style="display: none" id="progressbar"></div>

<br />

<div id="table_container">

  <p id="noTasks" style="display: hidden"></p>

  <div id="taskListContainer"><%= render :partial => "task_list" %></div>

  <br />
  <div id="show">Show other tasks</div><br/>

  <% @active_task = Task.find(:all, :conditions => {:active_task => true}) %>
  <% if @active_task %>
  <% end %>

</div>
