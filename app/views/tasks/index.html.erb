<% content_for :title, "Tasks" %>

<script type="text/javascript">
  var ajax_updater;
  var update_progress;

  var check_time; //<- actually should be named start_time
	var stopSwitch = true;
	var paused_time_stop;
	var paused_time_go;
	var paused_total_duration;
	

  function startTimer(elementID) {
    ajax_updater = new Ajax.PeriodicalUpdater(
      elementID,
      '/tasks/time_left/' + elementID.substring(5).toString(),
      { method: 'get', frequency: 1, decay: 1 }

    );
    check_time = setInterval('checkTime("' + elementID.substring(5).toString() + '")', 5000);
		// console.debug(check_time);
    update_progress = setInterval('updateProgressBar("'+elementID.substring(5).toString()+'")',100);
  }

  function hideTasks() {
  jQuery(document).ready( function() {      
      jQuery("#other_tasks").show();
      jQuery(".taskEntry").has("input[disabled=\"\"]").hide();
      jQuery(".taskEntry").not(jQuery(".taskEntry").has("input[disabled=\"\"]")).css("font-size",20);
    });
  }

  function stopTimer() {
    clearInterval(check_time);
    clearInterval(update_progress);
    // jQuery("#progressbar").hide();
    jQuery("#progressbar").css('margin-top', '1em');
  jQuery("#progressbar > div").css({ 'background': '#ABDD58' });
  }

  function updateProgressBar(taskId) {
    // Debugging is fun!
    // console.debug(timeLeft);
    var timeLeft = document.getElementById('timer' + taskId).innerHTML;
    var parsed_time = timeLeft.match(/(\d+):(\d{2})/);
    if (parsed_time != null)
    {
      var minutes = parsed_time[1];
      var seconds = parsed_time[2] / 60;
      var timeFloatLeft = parseFloat(seconds) + parseFloat(minutes);
      var totalTime = parseInt(jQuery("#taskEntry"+taskId+">.duration").html());
    jQuery("#progressbar").progressbar({value: ((parseFloat(totalTime) - timeFloatLeft)/parseFloat(totalTime)) * 100.00});
      jQuery("#progressbar").show();
      jQuery("#progressbar").css("margin-top", "1em");
    jQuery("#progressbar > div").css({ 'background': '#ABDD58' });
    }
  }

  function checkTime(taskId) {
    var timeLeft = document.getElementById('timer' + taskId).innerHTML;
    var timeLeftInt = parseInt(timeLeft);
    var parsed_time = timeLeft.match(/(\d+):(\d{2})/);
    if (parsed_time != null)
    {
      var minutes = parsed_time[1];
      var seconds = parsed_time[2] / 60;
      var timeFloatLeft = parseFloat(seconds) + parseFloat(minutes);
      if (timeFloatLeft <= 0) fail(taskId);
    }
    return timeLeftInt;
  }
  function fail(taskId) {
    window.location = '/tasks/fail/' + taskId;
  }
  function checkOff(taskId) {
  new Ajax.Request('/tasks/finish/' + taskId, { method: 'put' })
    taskDescription = $$('#taskEntry' + taskId + ' td')[1];
    if (taskDescription.className.indexOf('done') == -1) {
      taskDescription.className += ', done';
      Field.disable('checkbox' + taskId);
      ajax_updater.stop();
    }
    else {
      taskDescription.className = taskDescription.className.replace('done', '');
      ajax_updater.stop();
    }
    stopTimer();
  }


	function stopTask(taskId){
		
		if (stopSwitch == true) {
		
		/*	STOPPING THE TIMER	*/	
			
		// get current time
		paused_time_stop = document.getElementById('timer' + taskId).innerHTML;
		//console.debug("paused_time_stop" + paused_time_stop);
		
		// talk to the model pause
		new Ajax.Request('/tasks/pause/' + taskId, { method: 'put' });
		// effectively pause the timer
		ajax_updater.stop();
		stopTimer();
		 console.debug(check_time);
		
		// change progressbar and button colors
    jQuery("#progressbar > div").css({ 'background': 'Red' });
		jQuery("#imgStopTask" + taskId).children("img").attr('src','/images/circle-green-16.png');
		
		// set the stop button flag
		stopSwitch = false;
		}
		else {
			
		/*	RE-STARTING THE TIMER	*/
		
		// get the current time
		paused_time_go = document.getElementById('timer' + taskId).innerHTML;
		//paused_total_duration = paused_time_go - paused_time_stop;
		
		// talk to the model "resume"
		new Ajax.Request('/tasks/resume/' + taskId, { method: 'put' });
		
		//console.debug("paused_time_go" + paused_time_stop);
		//console.debug("paused_time_duration" + paused_time_stop);
		
		//console.debug(timeLeft);
		//console.debug(timeLeft);
		
		// effectively start the timer
		ajax_updater.start();
		//startTimer();
		
		// change the progressbar and button colors
		jQuery("#progressbar > div").css({ 'background': '#ABDD58' });	
		jQuery("#imgStopTask" + taskId).children("img").attr('src', '/images/circle-red-16.png');
		
		// set the stop button flag
		stopSwitch = true;
		
		// clear the paused_time(s) , JUST to be sure
		paused_time_stop = 0;
		paused_time_go = 0;
		}
	}


  function save_edit(taskId) {
    var current = document.getElementById('current');
    var val = current.value;
    current.parentNode.parentNode.innerHTML = val;
  new Ajax.Request('/tasks/update/' + taskId, { method: 'post', parameters: {'task[description]': val}});
    return false;
  }
  Event.observe(window, 'load', function() {
    $$('.task_description').each(function(td, index) {
      var taskId = parseInt(td.parentNode.id.replace('taskEntry', ''));
      td.id = 'td' + taskId;
      Event.observe(td.id, 'click', function() {
        if (td.getElementsByTagName('input').length != 0) return;
        td.innerHTML = '<form onsubmit="save_edit('+taskId+');"><input id="current" type="text" value="' + td.innerHTML + '" onblur="save_edit('+taskId+')"/></form>';
        td.getElementsByTagName('input')[0].focus();
      });
    });
    //Event.observe('signinForm', 'submit', checkForm);
    Calendar.setup({
      dateField: 'popupDateField',
      triggerElement: 'popupDateField',
      selectHandler: datePickSelect
    })

  });

  jQuery(document).ready( 
    function() {
      jQuery("#task_description").focus(function() { jQuery("#task_description").css('background-color','#f9f8e4'); });
      jQuery("#task_description").blur(function() { jQuery("#task_description").css('background-color', 'white');});
      jQuery("#other_tasks").click(function() { jQuery("#other_tasks").fadeTo('slow',0.0).delay(1000);jQuery(".taskEntry").delay(1000).show();});
      jQuery("#other_tasks").hide();
    });
  

function datePickSelect() {
  y = this.date.getUTCFullYear();
  m = this.date.getUTCMonth() + 1;
  d = this.date.getUTCDate();
  dateParam = y*10000+m*100+d;
  jQuery("#table_container").load('/tasks/ondate/',  {'date': dateParam});
  Calendar.defaultSelectHandler(this);
}

</script>

<style type="text/css">
  .done { text-decoration: line-through; color: #999; }
</style>

<h1>
</h1>

<div id="addTaskDiv">
<% form_tag(:controller => "tasks", :action => "create") do %>
  <%= text_field_tag(:task_description, nil, :size => "30", :name => "task[description]") %>
  <%= submit_tag("+") %>
<% end %>
</div>

<div id="popupDateField" class="dateField">Select Date</div>

<div style="display: none" id="progressbar"></div>

<br />

<div id="table_container">

  <%= render :partial => "task_list" %>

  <br />
  <div id="other_tasks">Show other tasks</div><br/>

  <% @active_task = Task.find(:all, :conditions => {:active_task => true}) %>
  <% if @active_task %>
  <% end %>


